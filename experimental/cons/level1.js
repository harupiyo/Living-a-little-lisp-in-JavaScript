/*
cons is ?

cons „ÅØÂÄ§„Å†„Åå„ÄÅLisp „ÅßÊúÄÈáçË¶Å„ÅÆ„Éá„Éº„ÇøÊßãÈÄ†„Å™„ÅÆ„ÅßÂÄ§„Ç∑„Çπ„ÉÜ„É†„Å®„ÅØÂà•ÁÆ°ÁêÜ„Å®„Åô„Çã„ÄÇ
ÂÄ§„Ç∑„Çπ„ÉÜ„É†„ÅØValue „ÅÆÊñπ„Åß„Çø„Ç∞‰ªò„Åç„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å®„Åó„Å¶ÂÆüË£Ö„Åô„Çã„ÄÇ

	(pointer-car . pointer-cdr)

	let c = new Cons(car,cdr);
	c.car(); => reference of CAR "NOT A VALUE"
	c.cdr(); => reference of CDR "NOT A VALUE"

	c.car(new Cons());

	c.cdr( c.car() );	circular list

	new Cons( new Cons(1,2), new Cons( 3, new Cons(4,5)))
		=> ((1 . 2) . (3  . (4 . 5)))
		=> ((1 . 2) 3 4 . 5))
	new Cons( new Cons( 1, new Cons(2, "nil"), new Cons( 3, new Cons(4, new Cons (5, "nil")))
		=> ((1 . (2 . nil)) . (3 . (4 . (5 . nil))))
		=> ((1 2) 3 4 5)
	new Cons( 1, "nil");	=> (1 . nil) == (1)

CL-USER(1): (cons 1 2)
(1 . 2)
CL-USER(2): (cons 1 (cons 2 3))
(1 2 . 3)
CL-USER(3): (cons (cons 1 2) (cons 3 (cons 4 5)))
((1 . 2) 3 4 . 5)
CL-USER(4): (cons (cons 1 (cons 2 nil)) (cons 3 (cons 4 (cons 5 nil))))
((1 2) 3 4 5)

(cons 1 nil) => (1)
(cons nil nil) => (nil)

*/

class Cons {
	constructor(car,cdr){
		/*
		carÈÉ®„ÄÅcdrÈÉ®„Å´„ÅØÂÄ§„Åß„ÅØ„Å™„Åè„Éù„Ç§„É≥„Çø„Éº„ÇíÂÖ•„Çå„Åü„ÅÑ„ÄÇ
		JavaScript „Åß„ÅØ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÂ†¥Âêà„ÅÆ„Åø„Éù„Ç§„É≥„Çø„Éº„Å´„Å™„Çã„ÅÆ„Åß„ÄÅ
		car, cdr „ÅØ(„Éó„É™„Éü„ÉÜ„Ç£„ÉñÂÄ§„Åß„ÅØ„Å™„Åè)„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇ
https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/typeof

		Ê≠£Âºè„Å´„ÅØcar, cdr „Å´„Åè„Çã„ÅÆ„ÅØ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆ„Éù„Ç§„É≥„Çø„Éº„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„Åå„ÄÅ
		„Çπ„Ç±„ÉÉ„ÉÅ„Å®„Åó„Å¶„Åì„ÅÆÂ†¥ÊâÄ„Åß„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´Â§âÊèõ„Åó„Å¶Ê†ºÁ¥ç„Åó„Å¶„Åä„Åè„ÄÇ
		*/
		this.car = ("object" != typeof car) ? new Value("TODO",car) : car
		this.cdr = ("object" != typeof cdr) ? new Value("TODO",cdr) : cdr
	}
}

let c1 = new Cons(1,2);
console.log(c1);

let c2 = new Cons( new Cons(1,2), new Cons(3,4));
console.log(c2);

let c3 = new Cons(1,2);
c3.cdr = c3.car;				// cdr „Å®car „ÅåÂêå„Åò„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÂèÇÁÖß„ÇíÊåá„Åó„Å¶„ÅÑ„Çã„ÅÆ„Åß
console.log(c3);
c3.car.val = "it changed";		// „Å©„Å°„Çâ„Åã„ÇíÂ§â„Åà„Çå„Å∞
console.log(c3);				// ‰∏°ÊñπÂ§â„Çè„Çã
/*
Cons {
  car: Value { tag: "TODO", val: "it changed" },
  cdr: Value { tag: "TODO", val: "it changed" }
}
„Åß„Åç„Å¶„ÅÑ„Çã„Å≠

Lisp „ÅØÈÅï„ÅÜÂãï„Åç„Çí„Åó„Å¶„ÅÑ„ÇãüòÅ
	(let ((c (cons 1 2)))
	  (rplacd c (car c))
	  (rplaca c 2)
	  c)

	(2 . 1)
	
Lisp „ÇíÂ≠¶„Çì„Åß„ÅÑ„ÅüÊôÇ„Å´„ÅØËÄÉ„Åà„ÇÇ„Åó„Å™„Åã„Å£„ÅüË©±È°å„Å†„Å™„Éº„ÄÇ
	CL-USER(2): (defparameter a 1)
	A
	CL-USER(3): (defparameter b 2)
	B
	CL-USER(4): (defparameter c (cons a b))
	C
	CL-USER(5): (rplacd c (car c))
	(1 . 1)
	CL-USER(6): (setq a 3)
	3
	CL-USER(7): c
	(1 . 2)

(cons a b) „ÇíË©ï‰æ°„Åô„ÇãÈöõ„Å´„ÄÅ„É™„Éº„ÉÄ„Éº„Åå„Ç∑„É≥„Éú„É´„ÇíË©ï‰æ°„ÅóÂÄ§„Å´ÁΩÆ„ÅçÊèõ„Åà„Å¶
(cons 1 2) „Å´„Åó„ÅüÁä∂ÊÖã„ÅßEVAL „Å´Ê∏°„Åô„Åã„Çâ„ÄÅcons „Å´„Ç∑„É≥„Éú„É´„ÇíÊ†ºÁ¥ç„Åó„Å¶„ÅÑ„Çã„Çè„Åë„Åò„ÇÉ„Å™„ÅÑ„ÄÇ
„Åó„Åü„Åå„Å£„Å¶6Ë°åÁõÆ„Åß„Ç∑„É≥„Éú„É´a „Å´Êñ∞„Åó„ÅÑÂÄ§„ÇíÂâ≤„ÇäÂΩì„Å¶„Å¶„ÇÇcons „Å´„ÅØ„Å™„Çì„ÅÆÈñ¢‰øÇ„ÇÇ„Å™„ÅÑ„ÄÇ

Ê¨°„Å´„Åì„ÅÆ„Çà„ÅÜ„Å´„Åó„Å¶„Åø„Çã„Å®
	CL-USER(7): c
	(1 . 2)
	CL-USER(11): (rplacd c (car c))
	(1 . 1)
	CL-USER(12): (rplaca c 3)
	(3 . 1)
car ÈÉ®(1 „Çí„Åï„Åô)„ÅØÁ¢∫„Åã„Å´„Éù„Ç§„É≥„Çø„Éº„Å†„Åå„ÄÅrplaca „ÅßÊñ∞„Åó„ÅÑÂÄ§3 „Å´Êõ∏„ÅçÊèõ„Åà„ÇãÈöõ„ÄÅÊñ∞„Åó„ÅÑÂÄ§3„Çí‰Ωú„Å£„Å¶„Åù„ÅÆ„Éù„Ç§„É≥„Çø„Éº„Å´Â∑Æ„ÅóÊõø„Åà„Çã„Çè„Åë„Å†„Åã„Çâ„ÄÅ1„ÅÆ‰∏≠Ë∫´„Çí„ÅÑ„Åò„Å£„Å¶„ÅÑ„Çã„Çè„Åë„Åò„ÇÉ„Å™„ÅÑ„ÄÇ

„Åì„ÅÜ„Åô„Çã„Å®Âàù„ÇÅ„Å¶Âæ™Áí∞ÂèÇÁÖß„Å´„Å™„Çã„ÄÇ
	CL-USER(13): (rplacd c c)
	3 3 3 3 3 3 ...^c

„Å™„Çã„Åª„Å©„ÄÇ

TODO „Åì„ÅÆÈÉ®ÂàÜ„ÇíËÄÉ„Åà„Å™„ÅÑ„Å®„ÅÑ„Åë„Å™„ÅÑ„ÄÇ
*/

// Â∑°Âõû„É™„Çπ„Éà
let c4 = new Cons(1,2);
c4.cdr = c4;
console.log(c4)
// => Cons { car: Value { tag: "TODO", val: 1 }, cdr: [Circular] }
// „Åß„Åç„Å¶„ÅÑ„Çã„Å≠

/*
cons with LISPish VALUE
*/

import {Value} from "../value/level1.js"

let c5 = new Cons(new Value("INT",1), new Value("CONSTANT","NIL"))
console.log(c5);


